
#
# NoSQL Benchmark configuration.
#
configuration {
	# server hostname
	server 'localhost'
	# port
 	port 33013
	# benchmark network buffer tunes
	buf_send 16384
	buf_recv 16384
	# benchmarking type:
	# no_limit - don't stop benchmarking
	# time_limit - stop benchmarking after time_limit
	# thread_limit - stop bencharking after client_max reach
	# (client_creation_policy interval should be specified also)
	benchmark 'no_limit'
	# benchmarking time limit
	# (only for time_limit benchmarking)
	time_limit 10
	# workload request count
	request_count 10000
	# receive server replies every batch count requests
	request_batch_count 1000
	# reporting interval in sec
	report_interval 1
	# report interface: default, integral_sum_only
	report_type 'default'
	# csv_file for saving report statistics
	#csv_file 'benchmark.csv'
	# client local statistics queue size
	client_history 16
	# client creation policy:
	# at_once - create all 'client_max' threads at startup
	# interval - create 'client_start' clients at startup and create
	# 'client_creation_increment' clients every 'create_creation_interval' seconds
	# till 'client_max' clients is reached.
	client_creation_policy 'at_once'
	# create new clients every specified interval secs
	client_creation_interval 1
	# count of clients to create during every increment step
	client_creation_increment 1
	# number of pre-created clients
	client_start 10
	# maximal number of clients
	# (also used by benchmark thread_limit)
	client_max 10
	# database driver to use:
	# tarantool, leveldb, nessdb
	db_driver 'tarantool'
	# key distribution interface:
	# uniform, gaussian
	key_distribution 'uniform'
	# key distribution iteration (used by gaussian distribution)
	key_distribution_iter 4
	# key type:
	# string (12 bytes), u32 and u64
	key_type 'u32'
	# size of every storage operation value
	value_size 16
	# distribution of workload tests in percents
	test_replace 40
	# update is meaningless for leveldb (equivalent to replace)
	test_update 10
	test_delete 10
	test_select 40
}
